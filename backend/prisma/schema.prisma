model Usuario {
  id               Int           @id @default(autoincrement())
  nome             String
  email            String        @unique
  senha            String
  medula_ossea     Boolean
  tipo_sanguineo   String
  data_nascimento  DateTime
  notificacoes     Boolean       @default(true)
  sexo             String
  icone_fk         Int?
  data_criacao     DateTime      @default(now())
  data_modificacao DateTime      @updatedAt
  agendamentos     Agendamento[]
  icone            Icone?         @relation(fields: [icone_fk], references: [id], onDelete: Cascade)
  Notificacao      Notificacao[]
}

model Icone {
  id               Int       @id @default(autoincrement())
  url              String
  data_criacao     DateTime  @default(now())
  data_modificacao DateTime  @updatedAt
  usuarios         Usuario[]
}

model Hemocentros {
  id               Int           @id @default(autoincrement())
  rua              String
  bairro           String
  cidade           String
  numero           String
  cep              String
  estado           String
  data_criacao     DateTime      @default(now())
  data_modificacao DateTime      @updatedAt
  agendamentos     Agendamento[]
}

model Agendamento {
  id                  Int         @id @default(autoincrement())
  usuario_fk          Int
  data_agendamento    DateTime
  horario_agendamento DateTime
  hemocentro_fk       Int
  status_agendamento  String      @default("Pendente")
  data_criacao        DateTime    @default(now())
  data_modificacao    DateTime    @updatedAt
  hemocentro          Hemocentros @relation(fields: [hemocentro_fk], references: [id], onDelete: Cascade)
  usuario             Usuario     @relation(fields: [usuario_fk], references: [id], onDelete: Cascade)
}

model Notificacao {
  id               Int      @id @default(autoincrement())
  titulo           String
  mensagem         String
  status           Boolean
  usuario_fk       Int
  data_criacao     DateTime @default(now())
  data_modificacao DateTime @updatedAt
  usuario          Usuario  @relation(fields: [usuario_fk], references: [id], onDelete: Cascade)
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}